import React, { useContext, useEffect, useState } from "react";
import { userContext } from "../context/userContext/userContext";

const AttendanceTable = () => {
  const [attendance, setAttendance] = useState("");
  const [attendanceRecords, setAttendanceRecords] = useState([]);
  const [request, setrequest] = useState("");
  const [showForm, setshowForm] = useState(false);
  const { user } = useContext(userContext);
  const [disAble, setdisAble] = useState(new Date().toISOString().slice(0, 10));
  const [disAble1, setdisAble1] = useState(0);
  const [date, setdate] = useState(new Date());
  console.log("diable", disAble);
  console.log("date", date.toISOString().slice(0, 10));

  const handlePresent = async () => {
    var fName = user.fullName;
    var em = user.email;
    try {
      const response = await fetch("http://localhost:3001/Attendance/Student", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          date: new Date(),
          status: "P",
          fullName: fName,
          email: em,
        }), // Adjust fullName and email accordingly
      });
      const mark = await response.json();
      setAttendance("P");
      setdisAble1(1);
      console.log("mark", mark);
    } catch (error) {
      console.error("Error marking attendance:", error);
    }
  };

  const handleLeave = async () => {
    var fName = user.fullName;
    var em = user.email;
    try {
      const response = await fetch("http://localhost:3001/Attendance/Student", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          date: new Date(),
          status: "A",
          fullName: fName,
          email: em,
        }), // Adjust fullName and email accordingly
      });
      const mark = await response.json();
      setAttendance("A");
      setdisAble1(1);
    } catch (error) {
      console.error("Error marking leave:", error);
    }
  };

  const showAttendance = async () => {
    var em = user.email;
    try {
      const response = await fetch(`http://localhost:3001/Student/${em}`);
      const records = await response.json();
      setAttendanceRecords(records);
    } catch (error) {
      console.error("Error fetching attendance records:", error);
    }
  };

  const handleLeaveRequest = async () => {
    var em = user.email;
    var fName = user.fullName;
    try {
      const response = await fetch(
        "http://localhost:3001/Attendance/Student/request",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            date: new Date(),
            fullName: fName,
            email: em,
            request,
          }),
        }
      );
      const mark = await response.json();
      setshowForm(false);
      setrequest("");
      setdisAble1(1);
      console.log(mark);
    } catch (error) {
      console.error("Error marking leave:", error);
    }
  };

  const showLeaveRequest = () => {
    setshowForm(true);
  };
  const submitRequest = (e) => {
    setrequest(e.target.value);
  };

  //! get date
  useEffect(() => {
    const getDate = async () => {
      var em = user.email;
      try {
        const response = await fetch(`http://localhost:3001/Student/${em}`);
        const records = await response.json();
        if (records.length > 0) {
          const latestRecord = records[records.length - 1];
          console.log("latest record", latestRecord);
          setdate(new Date(latestRecord.date));
        }
      } catch (error) {
        console.error("Error fetching attendance records:", error);
      }
    };
    getDate();
  }, [user.email]);

  return (
    <div className="container mt-4">
      <button
        className="btn btn-primary"
        onClick={handlePresent}
        disabled={disAble === date.toISOString().slice(0, 10) || disAble1 === 1}
      >
        Mark Attendance
      </button>
      <button
        className="btn btn-primary mx-2"
        onClick={handleLeave}
        disabled={disAble === date.toISOString().slice(0, 10) || disAble1 === 1}
      >
        Mark Leave
      </button>
      <button className="btn btn-primary" onClick={showAttendance}>
        View Attendance
      </button>
      <button
        className="btn btn-primary mx-2"
        onClick={showLeaveRequest}
        disabled={disAble === date.toISOString().slice(0, 10) || disAble1 === 1}
      >
        Leave Request
      </button>
      {showForm ? (
        <div className="form-floating mt-3">
          <textarea
            className="form-control"
            placeholder="Leave a comment here"
            id="floatingTextarea2"
            style={{ height: "100px" }}
            name="request"
            value={request}
            onChange={submitRequest}
          ></textarea>
          <label for="floatingTextarea2">Write your request</label>
          <button className="btn btn-primary mt-3" onClick={handleLeaveRequest}>
            Send
          </button>
          <button
            className="btn btn-primary mt-3 ms-2"
            onClick={() => setshowForm(false)}
          >
            Cancel
          </button>
        </div>
      ) : null}
      <div className="mt-4">
        {attendanceRecords.length > 0 && (
          <table className="table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Name</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              {attendanceRecords.map((record, index) => (
                <tr key={index}>
                  <td>{new Date(record.date).toISOString().slice(0, 10)}</td>
                  <td>{record.fullName}</td>
                  <td>{record.status ? record.status : "Pending"}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default AttendanceTable;
